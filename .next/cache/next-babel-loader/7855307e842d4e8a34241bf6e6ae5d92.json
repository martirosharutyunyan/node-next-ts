{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, memo } from \"react\";\nimport axios from \"axios\"; //types\n\nimport { useHistory } from 'react-router-dom';\n\nlet Container1 = () => {\n  const history = useHistory();\n\n  const getUsers = async () => {\n    let postToBack = await axios.post(\"/getUsers\");\n    setarr(postToBack.data);\n  };\n\n  const {\n    0: state,\n    1: setstate\n  } = useState({\n    name: \"Martiros\",\n    surname: \"Harutunyan\",\n    email: \"harutunyan.martiros@mail.ru\",\n    password: \"hhs13516\",\n    confirmPassword: \"hhs13516\",\n    loginEmail: \"harutunyan.martiros@mail.ru\",\n    loginPassword: \"hhs13516\",\n    verificationCode: \"\"\n  });\n  const {\n    0: arr,\n    1: setarr\n  } = useState([]);\n  const {\n    0: load,\n    1: setload\n  } = useState(true);\n  const {\n    0: counter,\n    1: setcounter\n  } = useState(true);\n  const {\n    0: message,\n    1: setmessage\n  } = useState(\"\");\n  const {\n    0: token,\n    1: settoken\n  } = useState(\"\");\n  const {\n    0: userId,\n    1: setuserId\n  } = useState(\"\");\n  const {\n    0: verify,\n    1: setverify\n  } = useState(true);\n  const {\n    0: code,\n    1: setcode\n  } = useState('');\n\n  const autoLogin = async () => {\n    if (localStorage.getItem(\"secret\") !== null) {\n      let postToBack = await axios.post(\"/autoLogin\", {\n        token: localStorage.getItem(\"secret\")\n      });\n    }\n  };\n\n  useEffect(() => {\n    autoLogin();\n  }, []);\n  useEffect(() => {\n    getUsers();\n  }, [load]);\n\n  const changeValue = e => {\n    // setstate((prev:objectType):objectType=>{\n    //     return {\n    //         ...prev,\n    //         [e.target.id]:e.target.value\n    //     }\n    // })\n    // parzel te inchi chi ashxatum es verevi dzevy\n    setstate(_objectSpread(_objectSpread({}, state), {}, {\n      [e.target.id]: e.target.value\n    }));\n  };\n\n  const clear = () => {\n    setstate({\n      name: \"\",\n      surname: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      loginEmail: \"harutunyan.martiros@mail.ru\",\n      loginPassword: \"hhs13516\",\n      verificationCode: \"\"\n    });\n    setverify(true);\n  };\n\n  const deleteUser = async elem => {\n    await setload(false);\n    let postToBack = await axios.post(\"/deleteUser\", elem);\n    await setload(true);\n    setmessage(postToBack.data.message);\n    setTimeout(() => {\n      setmessage(\"\");\n    }, 2000);\n  };\n\n  const Registration = async () => {\n    try {\n      await setload(false);\n      let postToBack = await axios.post(\"/api/auth/registr\", {\n        name: state.name,\n        surname: state.surname,\n        email: state.email,\n        password: state.password\n      });\n      await setload(true);\n\n      if (postToBack.data.message === 'already exists') {\n        setmessage(postToBack.data.message);\n        setTimeout(() => {\n          setmessage(\"\");\n        }, 2000);\n      } else {\n        setverify(false);\n        setcode(postToBack.data.code);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const loginPost = async () => {\n    await setload(false);\n    let postToBack = await axios.post(\"/api/auth/login\", {\n      loginEmail: state.loginEmail,\n      loginPassword: state.loginPassword\n    });\n    console.log(postToBack.data);\n\n    if (postToBack.data.message === \"password is incorect try again\") {\n      console.log(\"password is incorect try again\");\n    } else if (postToBack.data.message === \"sorry your login or email are not right\") {\n      console.log(\"sorry your login or email are not right\");\n    } else {\n      localStorage.setItem(\"secret\", JSON.stringify({\n        token: postToBack.data.token,\n        userId: postToBack.data.userEmail._id\n      }, null, 2));\n      await history.push(`/user/${postToBack.data.userEmail.name}`);\n    }\n\n    await setload(true);\n    setTimeout(() => {\n      setmessage(\"\");\n    }, 1000);\n  };\n\n  const verificate = async () => {\n    setload(false);\n    let postToBack = await axios.post(\"/api/auth/save\", {\n      name: state.name,\n      surname: state.surname,\n      email: state.email,\n      password: state.password,\n      verificationCode: state.verificationCode,\n      code\n    });\n\n    if (postToBack.data.message === 'User saved') {\n      setmessage(postToBack.data.message);\n      setcounter(true);\n      setverify(!verify);\n      setstate(_objectSpread(_objectSpread({}, state), {}, {\n        verificationCode: ''\n      }));\n    } else {\n      setmessage(postToBack.data.message);\n      setTimeout(() => {\n        setmessage(\"\");\n      }, 2000);\n    }\n\n    setload(true);\n  };\n\n  if (!load) {\n    return /*#__PURE__*/_jsx(_Fragment, {\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: \"loaderReact\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"spinner-border text-primary\",\n          style: {\n            width: \"500px\",\n            height: \"500px\"\n          },\n          role: \"status\",\n          children: /*#__PURE__*/_jsx(\"span\", {\n            className: \"sr-only\",\n            children: \"Loading...\"\n          })\n        })\n      })\n    });\n  }\n\n  const verification = /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"input\", {\n      type: \"text\",\n      onChange: changeValue,\n      value: state.verificationCode,\n      id: \"verificationCode\"\n    }), /*#__PURE__*/_jsx(\"button\", {\n      onClick: verificate,\n      children: \"click for verification\"\n    })]\n  });\n\n  const registracia = /*#__PURE__*/_jsxs(\"div\", {\n    className: \"registracia\",\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      style: {\n        fontSize: \"2vw\"\n      },\n      children: \"Registracia\"\n    }), /*#__PURE__*/_jsx(\"input\", {\n      onChange: changeValue,\n      value: state.name,\n      placeholder: \"name\",\n      type: \"text\",\n      id: \"name\"\n    }), /*#__PURE__*/_jsx(\"input\", {\n      onChange: changeValue,\n      value: state.surname,\n      placeholder: \"surname\",\n      type: \"text\",\n      id: \"surname\"\n    }), /*#__PURE__*/_jsx(\"input\", {\n      onChange: changeValue,\n      value: state.email,\n      placeholder: \"email\",\n      type: \"text\",\n      id: \"email\"\n    }), /*#__PURE__*/_jsx(\"input\", {\n      onChange: changeValue,\n      value: state.password,\n      placeholder: \"password\",\n      type: \"password\",\n      id: \"password\"\n    }), /*#__PURE__*/_jsx(\"input\", {\n      onChange: changeValue,\n      value: state.confirmPassword,\n      placeholder: \"confirm Password\",\n      type: \"password\",\n      id: \"confirmPassword\"\n    }), /*#__PURE__*/_jsx(\"button\", {\n      onClick: Registration,\n      disabled: state.name.trim() && state.surname.trim() && state.email.trim() && state.password.trim() && state.confirmPassword.trim() && state.confirmPassword === state.password && state.password.length >= 8 && state.confirmPassword.length >= 8 ? false : true,\n      children: \"click\"\n    }), verify ? null : verification, /*#__PURE__*/_jsx(\"button\", {\n      onClick: clear,\n      children: \"clear\"\n    })]\n  });\n\n  const login = /*#__PURE__*/_jsxs(\"div\", {\n    className: \"login\",\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      style: {\n        fontSize: \"2vw\"\n      },\n      children: \"Login\"\n    }), /*#__PURE__*/_jsx(\"input\", {\n      value: state.loginEmail,\n      onChange: changeValue,\n      placeholder: \"email\",\n      id: \"loginEmail\",\n      type: \"text\"\n    }), /*#__PURE__*/_jsx(\"input\", {\n      value: state.loginPassword,\n      onChange: changeValue,\n      placeholder: \"password\",\n      id: \"loginPassword\",\n      type: \"text\"\n    }), /*#__PURE__*/_jsx(\"button\", {\n      onClick: loginPost,\n      children: \"click\"\n    })]\n  });\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: \"div\",\n      children: [/*#__PURE__*/_jsx(\"p\", {\n        onClick: () => setcounter(!counter),\n        children: counter ? \"go to registracia\" : \"go to login\"\n      }), counter ? login : registracia, arr.map((elem, i) => {\n        return /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsx(\"p\", {\n            children: elem.email\n          }), /*#__PURE__*/_jsx(\"p\", {\n            children: elem.password\n          }), /*#__PURE__*/_jsx(\"button\", {\n            onClick: deleteUser.bind(null, elem),\n            children: \"delete\"\n          })]\n        }, elem.id);\n      })]\n    }), /*#__PURE__*/_jsx(\"p\", {\n      children: message\n    })]\n  });\n};\n\nexport default Container1 = /*#__PURE__*/memo(Container1);","map":{"version":3,"sources":["C:/Users/Martiros/Desktop/node-next-ts/server/pages/auth.tsx"],"names":["React","useState","useEffect","memo","axios","useHistory","Container1","history","getUsers","postToBack","post","setarr","data","state","setstate","name","surname","email","password","confirmPassword","loginEmail","loginPassword","verificationCode","arr","load","setload","counter","setcounter","message","setmessage","token","settoken","userId","setuserId","verify","setverify","code","setcode","autoLogin","localStorage","getItem","changeValue","e","target","id","value","clear","deleteUser","elem","setTimeout","Registration","err","console","log","loginPost","setItem","JSON","stringify","userEmail","_id","push","verificate","width","height","verification","registracia","fontSize","trim","length","login","map","i","bind"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAsDC,IAAtD,QAAsE,OAAtE;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AAOA,SAASC,UAAT,QAA2B,kBAA3B;;AACA,IAAIC,UAAc,GAAG,MAAM;AACvB,QAAMC,OAAO,GAAGF,UAAU,EAA1B;;AACA,QAAMG,QAAQ,GAAG,YAA2B;AACxC,QAAIC,UAAqB,GAAG,MAAML,KAAK,CAACM,IAAN,CAAW,WAAX,CAAlC;AACAC,IAAAA,MAAM,CAACF,UAAU,CAACG,IAAZ,CAAN;AACH,GAHD;;AAKA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBb,QAAQ,CAAY;AAC1Cc,IAAAA,IAAI,EAAE,UADoC;AAE1CC,IAAAA,OAAO,EAAE,YAFiC;AAG1CC,IAAAA,KAAK,EAAE,6BAHmC;AAI1CC,IAAAA,QAAQ,EAAE,UAJgC;AAK1CC,IAAAA,eAAe,EAAE,UALyB;AAM1CC,IAAAA,UAAU,EAAE,6BAN8B;AAO1CC,IAAAA,aAAa,EAAE,UAP2B;AAQ1CC,IAAAA,gBAAgB,EAAE;AARwB,GAAZ,CAAlC;AAUA,QAAM;AAAA,OAACC,GAAD;AAAA,OAAMZ;AAAN,MAAgBV,QAAQ,CAAiB,EAAjB,CAA9B;AACA,QAAM;AAAA,OAACuB,IAAD;AAAA,OAAOC;AAAP,MAAkBxB,QAAQ,CAAU,IAAV,CAAhC;AACA,QAAM;AAAA,OAACyB,OAAD;AAAA,OAAUC;AAAV,MAAwB1B,QAAQ,CAAU,IAAV,CAAtC;AACA,QAAM;AAAA,OAAC2B,OAAD;AAAA,OAAUC;AAAV,MAAwB5B,QAAQ,CAAS,EAAT,CAAtC;AACA,QAAM;AAAA,OAAC6B,KAAD;AAAA,OAAQC;AAAR,MAAoB9B,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAM;AAAA,OAAC+B,MAAD;AAAA,OAASC;AAAT,MAAsBhC,QAAQ,CAAS,EAAT,CAApC;AACA,QAAM;AAAA,OAACiC,MAAD;AAAA,OAASC;AAAT,MAAsBlC,QAAQ,CAAU,IAAV,CAApC;AACA,QAAM;AAAA,OAACmC,IAAD;AAAA,OAAOC;AAAP,MAAkBpC,QAAQ,CAAS,EAAT,CAAhC;;AACA,QAAMqC,SAAS,GAAG,YAA2B;AACzC,QAAIC,YAAY,CAACC,OAAb,CAAqB,QAArB,MAAmC,IAAvC,EAA6C;AACzC,UAAI/B,UAAU,GAAG,MAAML,KAAK,CAACM,IAAN,CAAW,YAAX,EAAyB;AAC5CoB,QAAAA,KAAK,EAAES,YAAY,CAACC,OAAb,CAAqB,QAArB;AADqC,OAAzB,CAAvB;AAGH;AACJ,GAND;;AAOAtC,EAAAA,SAAS,CAAC,MAAM;AACZoC,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;AAGApC,EAAAA,SAAS,CAAC,MAAY;AAClBM,IAAAA,QAAQ;AACX,GAFQ,EAEN,CAACgB,IAAD,CAFM,CAAT;;AAGA,QAAMiB,WAAW,GAAIC,CAAD,IAAoB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA5B,IAAAA,QAAQ,iCAAMD,KAAN;AAAa,OAAC6B,CAAC,CAACC,MAAF,CAASC,EAAV,GAAeF,CAAC,CAACC,MAAF,CAASE;AAArC,OAAR;AACH,GATD;;AAUA,QAAMC,KAAK,GAAG,MAAW;AACrBhC,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAE,EADD;AAELC,MAAAA,OAAO,EAAE,EAFJ;AAGLC,MAAAA,KAAK,EAAE,EAHF;AAILC,MAAAA,QAAQ,EAAE,EAJL;AAKLC,MAAAA,eAAe,EAAE,EALZ;AAMLC,MAAAA,UAAU,EAAE,6BANP;AAOLC,MAAAA,aAAa,EAAE,UAPV;AAQLC,MAAAA,gBAAgB,EAAE;AARb,KAAD,CAAR;AAUAa,IAAAA,SAAS,CAAC,IAAD,CAAT;AACH,GAZD;;AAaA,QAAMY,UAAU,GAAG,MAAOC,IAAP,IAA6C;AAC5D,UAAMvB,OAAO,CAAC,KAAD,CAAb;AACA,QAAIhB,UAAqB,GAAG,MAAML,KAAK,CAACM,IAAN,CAAW,aAAX,EAA0BsC,IAA1B,CAAlC;AACA,UAAMvB,OAAO,CAAC,IAAD,CAAb;AACAI,IAAAA,UAAU,CAACpB,UAAU,CAACG,IAAX,CAAgBgB,OAAjB,CAAV;AACAqB,IAAAA,UAAU,CAAC,MAAM;AACbpB,MAAAA,UAAU,CAAC,EAAD,CAAV;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GARD;;AAUA,QAAMqB,YAAY,GAAG,YAA2B;AAC5C,QAAI;AACA,YAAMzB,OAAO,CAAC,KAAD,CAAb;AACA,UAAIhB,UAAqB,GAAG,MAAML,KAAK,CAACM,IAAN,CAAW,mBAAX,EAAgC;AAC9DK,QAAAA,IAAI,EAAEF,KAAK,CAACE,IADkD;AAE9DC,QAAAA,OAAO,EAAEH,KAAK,CAACG,OAF+C;AAG9DC,QAAAA,KAAK,EAAEJ,KAAK,CAACI,KAHiD;AAI9DC,QAAAA,QAAQ,EAAEL,KAAK,CAACK;AAJ8C,OAAhC,CAAlC;AAMA,YAAMO,OAAO,CAAC,IAAD,CAAb;;AACA,UAAGhB,UAAU,CAACG,IAAX,CAAgBgB,OAAhB,KAA4B,gBAA/B,EAAgD;AAC5CC,QAAAA,UAAU,CAACpB,UAAU,CAACG,IAAX,CAAgBgB,OAAjB,CAAV;AACAqB,QAAAA,UAAU,CAAC,MAAM;AACbpB,UAAAA,UAAU,CAAC,EAAD,CAAV;AACH,SAFS,EAEP,IAFO,CAAV;AAGH,OALD,MAKO;AACHM,QAAAA,SAAS,CAAC,KAAD,CAAT;AACAE,QAAAA,OAAO,CAAC5B,UAAU,CAACG,IAAX,CAAgBwB,IAAjB,CAAP;AACH;AACJ,KAlBD,CAkBE,OAAOe,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ,GAtBD;;AAuBA,QAAMG,SAAS,GAAG,YAA2B;AACzC,UAAM7B,OAAO,CAAC,KAAD,CAAb;AACA,QAAIhB,UAAU,GAAG,MAAML,KAAK,CAACM,IAAN,CAAW,iBAAX,EAA8B;AACjDU,MAAAA,UAAU,EAAEP,KAAK,CAACO,UAD+B;AAEjDC,MAAAA,aAAa,EAAER,KAAK,CAACQ;AAF4B,KAA9B,CAAvB;AAIA+B,IAAAA,OAAO,CAACC,GAAR,CAAY5C,UAAU,CAACG,IAAvB;;AACA,QAAIH,UAAU,CAACG,IAAX,CAAgBgB,OAAhB,KAA4B,gCAAhC,EAAkE;AAC9DwB,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACH,KAFD,MAEO,IACH5C,UAAU,CAACG,IAAX,CAAgBgB,OAAhB,KACA,yCAFG,EAGL;AACEwB,MAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACH,KALM,MAKA;AACHd,MAAAA,YAAY,CAACgB,OAAb,CACI,QADJ,EAEIC,IAAI,CAACC,SAAL,CACI;AACI3B,QAAAA,KAAK,EAAErB,UAAU,CAACG,IAAX,CAAgBkB,KAD3B;AAEIE,QAAAA,MAAM,EAAEvB,UAAU,CAACG,IAAX,CAAgB8C,SAAhB,CAA0BC;AAFtC,OADJ,EAKI,IALJ,EAMI,CANJ,CAFJ;AAWA,YAAMpD,OAAO,CAACqD,IAAR,CAAc,SAAQnD,UAAU,CAACG,IAAX,CAAgB8C,SAAhB,CAA0B3C,IAAK,EAArD,CAAN;AACH;;AACD,UAAMU,OAAO,CAAC,IAAD,CAAb;AACAwB,IAAAA,UAAU,CAAC,MAAM;AACbpB,MAAAA,UAAU,CAAC,EAAD,CAAV;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GAhCD;;AAiCA,QAAMgC,UAAU,GAAG,YAA2B;AAC1CpC,IAAAA,OAAO,CAAC,KAAD,CAAP;AACA,QAAIhB,UAAU,GAAG,MAAML,KAAK,CAACM,IAAN,CAAW,gBAAX,EAA6B;AAChDK,MAAAA,IAAI,EAAEF,KAAK,CAACE,IADoC;AAEhDC,MAAAA,OAAO,EAAEH,KAAK,CAACG,OAFiC;AAGhDC,MAAAA,KAAK,EAAEJ,KAAK,CAACI,KAHmC;AAIhDC,MAAAA,QAAQ,EAAEL,KAAK,CAACK,QAJgC;AAKhDI,MAAAA,gBAAgB,EAAET,KAAK,CAACS,gBALwB;AAMhDc,MAAAA;AANgD,KAA7B,CAAvB;;AAQA,QAAG3B,UAAU,CAACG,IAAX,CAAgBgB,OAAhB,KAA4B,YAA/B,EAA4C;AACxCC,MAAAA,UAAU,CAACpB,UAAU,CAACG,IAAX,CAAgBgB,OAAjB,CAAV;AACAD,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAQ,MAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACApB,MAAAA,QAAQ,iCAAKD,KAAL;AAAWS,QAAAA,gBAAgB,EAAC;AAA5B,SAAR;AACH,KALD,MAKM;AACFO,MAAAA,UAAU,CAACpB,UAAU,CAACG,IAAX,CAAgBgB,OAAjB,CAAV;AACAqB,MAAAA,UAAU,CAAC,MAAM;AACbpB,QAAAA,UAAU,CAAC,EAAD,CAAV;AACH,OAFS,EAEP,IAFO,CAAV;AAGH;;AACDJ,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GAtBD;;AAuBA,MAAI,CAACD,IAAL,EAAW;AACP,wBACI;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,+BACI;AACI,UAAA,SAAS,EAAC,6BADd;AAEI,UAAA,KAAK,EAAE;AAAEsC,YAAAA,KAAK,EAAE,OAAT;AAAkBC,YAAAA,MAAM,EAAE;AAA1B,WAFX;AAGI,UAAA,IAAI,EAAC,QAHT;AAAA,iCAKI;AAAM,YAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AALJ;AADJ;AADJ,MADJ;AAaH;;AACD,QAAMC,YAAY,gBACd;AAAA,4BACI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,QAAQ,EAAEvB,WAFd;AAGI,MAAA,KAAK,EAAE5B,KAAK,CAACS,gBAHjB;AAII,MAAA,EAAE,EAAC;AAJP,MADJ,eAOI;AAAQ,MAAA,OAAO,EAAEuC,UAAjB;AAAA;AAAA,MAPJ;AAAA,IADJ;;AAWA,QAAMI,WAAW,gBACb;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACI;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAZ;AAAA;AAAA,MADJ,eAEI;AACI,MAAA,QAAQ,EAAEzB,WADd;AAEI,MAAA,KAAK,EAAE5B,KAAK,CAACE,IAFjB;AAGI,MAAA,WAAW,EAAC,MAHhB;AAII,MAAA,IAAI,EAAC,MAJT;AAKI,MAAA,EAAE,EAAC;AALP,MAFJ,eASI;AACI,MAAA,QAAQ,EAAE0B,WADd;AAEI,MAAA,KAAK,EAAE5B,KAAK,CAACG,OAFjB;AAGI,MAAA,WAAW,EAAC,SAHhB;AAII,MAAA,IAAI,EAAC,MAJT;AAKI,MAAA,EAAE,EAAC;AALP,MATJ,eAgBI;AACI,MAAA,QAAQ,EAAEyB,WADd;AAEI,MAAA,KAAK,EAAE5B,KAAK,CAACI,KAFjB;AAGI,MAAA,WAAW,EAAC,OAHhB;AAII,MAAA,IAAI,EAAC,MAJT;AAKI,MAAA,EAAE,EAAC;AALP,MAhBJ,eAuBI;AACI,MAAA,QAAQ,EAAEwB,WADd;AAEI,MAAA,KAAK,EAAE5B,KAAK,CAACK,QAFjB;AAGI,MAAA,WAAW,EAAC,UAHhB;AAII,MAAA,IAAI,EAAC,UAJT;AAKI,MAAA,EAAE,EAAC;AALP,MAvBJ,eA8BI;AACI,MAAA,QAAQ,EAAEuB,WADd;AAEI,MAAA,KAAK,EAAE5B,KAAK,CAACM,eAFjB;AAGI,MAAA,WAAW,EAAC,kBAHhB;AAII,MAAA,IAAI,EAAC,UAJT;AAKI,MAAA,EAAE,EAAC;AALP,MA9BJ,eAqCI;AACI,MAAA,OAAO,EAAE+B,YADb;AAEI,MAAA,QAAQ,EACJrC,KAAK,CAACE,IAAN,CAAWoD,IAAX,MACAtD,KAAK,CAACG,OAAN,CAAcmD,IAAd,EADA,IAEAtD,KAAK,CAACI,KAAN,CAAYkD,IAAZ,EAFA,IAGAtD,KAAK,CAACK,QAAN,CAAeiD,IAAf,EAHA,IAIAtD,KAAK,CAACM,eAAN,CAAsBgD,IAAtB,EAJA,IAKAtD,KAAK,CAACM,eAAN,KAA0BN,KAAK,CAACK,QALhC,IAMAL,KAAK,CAACK,QAAN,CAAekD,MAAf,IAAyB,CANzB,IAOAvD,KAAK,CAACM,eAAN,CAAsBiD,MAAtB,IAAgC,CAPhC,GAQM,KARN,GASM,IAZd;AAAA;AAAA,MArCJ,EAsDKlC,MAAM,GAAG,IAAH,GAAU8B,YAtDrB,eAuDI;AAAQ,MAAA,OAAO,EAAElB,KAAjB;AAAA;AAAA,MAvDJ;AAAA,IADJ;;AA4DA,QAAMuB,KAAK,gBACP;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACI;AAAK,MAAA,KAAK,EAAE;AAAEH,QAAAA,QAAQ,EAAE;AAAZ,OAAZ;AAAA;AAAA,MADJ,eAEI;AACI,MAAA,KAAK,EAAErD,KAAK,CAACO,UADjB;AAEI,MAAA,QAAQ,EAAEqB,WAFd;AAGI,MAAA,WAAW,EAAC,OAHhB;AAII,MAAA,EAAE,EAAC,YAJP;AAKI,MAAA,IAAI,EAAC;AALT,MAFJ,eASI;AACI,MAAA,KAAK,EAAE5B,KAAK,CAACQ,aADjB;AAEI,MAAA,QAAQ,EAAEoB,WAFd;AAGI,MAAA,WAAW,EAAC,UAHhB;AAII,MAAA,EAAE,EAAC,eAJP;AAKI,MAAA,IAAI,EAAC;AALT,MATJ,eAgBI;AAAQ,MAAA,OAAO,EAAEa,SAAjB;AAAA;AAAA,MAhBJ;AAAA,IADJ;;AAoBA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACI;AAAG,QAAA,OAAO,EAAE,MAAM3B,UAAU,CAAC,CAACD,OAAF,CAA5B;AAAA,kBACKA,OAAO,GAAG,mBAAH,GAAyB;AADrC,QADJ,EAIKA,OAAO,GAAG2C,KAAH,GAAWJ,WAJvB,EAMK1C,GAAG,CAAC+C,GAAJ,CACG,CAACtB,IAAD,EAAqBuB,CAArB,KAAgD;AAC5C,4BACI;AAAA,kCACI;AAAA,sBAAIvB,IAAI,CAAC/B;AAAT,YADJ,eAEI;AAAA,sBAAI+B,IAAI,CAAC9B;AAAT,YAFJ,eAGI;AAAQ,YAAA,OAAO,EAAE6B,UAAU,CAACyB,IAAX,CAAgB,IAAhB,EAAsBxB,IAAtB,CAAjB;AAAA;AAAA,YAHJ;AAAA,WAAUA,IAAI,CAACJ,EAAf,CADJ;AASH,OAXJ,CANL;AAAA,MADJ,eAqBI;AAAA,gBAAIhB;AAAJ,MArBJ;AAAA,IADJ;AAyBH,CAzRD;;AA2RA,eAAetB,UAAU,gBAAGH,IAAI,CAACG,UAAD,CAAhC","sourcesContent":["import React, { useState, useEffect, useMemo, useRef, memo, FC } from \"react\";\r\nimport axios from \"axios\";\r\n//types\r\nimport {\r\n    input,\r\n    axiosType,\r\n    userDataType,\r\n    stateType,\r\n} from \"../types/types\";\r\nimport { useHistory } from 'react-router-dom';\r\nlet Container1: FC = () => {\r\n    const history = useHistory();\r\n    const getUsers = async (): Promise<void> => {\r\n        let postToBack: axiosType = await axios.post(\"/getUsers\");\r\n        setarr(postToBack.data);\r\n    };\r\n\r\n    const [state, setstate] = useState<stateType>({\r\n        name: \"Martiros\",\r\n        surname: \"Harutunyan\",\r\n        email: \"harutunyan.martiros@mail.ru\",\r\n        password: \"hhs13516\",\r\n        confirmPassword: \"hhs13516\",\r\n        loginEmail: \"harutunyan.martiros@mail.ru\",\r\n        loginPassword: \"hhs13516\",\r\n        verificationCode: \"\",\r\n    });\r\n    const [arr, setarr] = useState<userDataType[]>([]);\r\n    const [load, setload] = useState<boolean>(true);\r\n    const [counter, setcounter] = useState<boolean>(true);\r\n    const [message, setmessage] = useState<string>(\"\");\r\n    const [token, settoken] = useState<string>(\"\");\r\n    const [userId, setuserId] = useState<string>(\"\");\r\n    const [verify, setverify] = useState<boolean>(true);\r\n    const [code, setcode] = useState<string>('');\r\n    const autoLogin = async (): Promise<void> => {\r\n        if (localStorage.getItem(\"secret\") !== null) {\r\n            let postToBack = await axios.post(\"/autoLogin\", {\r\n                token: localStorage.getItem(\"secret\"),\r\n            });\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        autoLogin();\r\n    }, []);\r\n    useEffect((): void => {\r\n        getUsers();\r\n    }, [load]);\r\n    const changeValue = (e: input): void => {\r\n        // setstate((prev:objectType):objectType=>{\r\n        //     return {\r\n        //         ...prev,\r\n        //         [e.target.id]:e.target.value\r\n        //     }\r\n        // })\r\n        // parzel te inchi chi ashxatum es verevi dzevy\r\n        setstate({ ...state, [e.target.id]: e.target.value });\r\n    };\r\n    const clear = ():void => {\r\n        setstate({\r\n            name: \"\",\r\n            surname: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            loginEmail: \"harutunyan.martiros@mail.ru\",\r\n            loginPassword: \"hhs13516\",\r\n            verificationCode: \"\",   \r\n        })\r\n        setverify(true)\r\n    }\r\n    const deleteUser = async (elem: userDataType): Promise<void> => {\r\n        await setload(false);\r\n        let postToBack: axiosType = await axios.post(\"/deleteUser\", elem);\r\n        await setload(true);\r\n        setmessage(postToBack.data.message);\r\n        setTimeout(() => {\r\n            setmessage(\"\");\r\n        }, 2000);\r\n    };\r\n\r\n    const Registration = async (): Promise<void> => {\r\n        try {\r\n            await setload(false);\r\n            let postToBack: axiosType = await axios.post(\"/api/auth/registr\", {\r\n                name: state.name,\r\n                surname: state.surname,\r\n                email: state.email,\r\n                password: state.password,\r\n            });\r\n            await setload(true);\r\n            if(postToBack.data.message === 'already exists'){\r\n                setmessage(postToBack.data.message);\r\n                setTimeout(() => {\r\n                    setmessage(\"\");\r\n                }, 2000);\r\n            } else {\r\n                setverify(false);\r\n                setcode(postToBack.data.code)\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n    const loginPost = async (): Promise<void> => {\r\n        await setload(false);\r\n        let postToBack = await axios.post(\"/api/auth/login\", {\r\n            loginEmail: state.loginEmail,\r\n            loginPassword: state.loginPassword,\r\n        });\r\n        console.log(postToBack.data)\r\n        if (postToBack.data.message === \"password is incorect try again\") {\r\n            console.log(\"password is incorect try again\");\r\n        } else if (\r\n            postToBack.data.message ===\r\n            \"sorry your login or email are not right\"\r\n        ) {\r\n            console.log(\"sorry your login or email are not right\");\r\n        } else {\r\n            localStorage.setItem(\r\n                \"secret\",\r\n                JSON.stringify(\r\n                    {\r\n                        token: postToBack.data.token,\r\n                        userId: postToBack.data.userEmail._id,\r\n                    },\r\n                    null,\r\n                    2,\r\n                ),\r\n            );\r\n            await history.push(`/user/${postToBack.data.userEmail.name}`);\r\n        }\r\n        await setload(true);\r\n        setTimeout(() => {\r\n            setmessage(\"\");\r\n        }, 1000);\r\n    };\r\n    const verificate = async (): Promise<void> => {\r\n        setload(false)\r\n        let postToBack = await axios.post(\"/api/auth/save\", {\r\n            name: state.name,\r\n            surname: state.surname,\r\n            email: state.email,\r\n            password: state.password,\r\n            verificationCode: state.verificationCode,\r\n            code,\r\n        });\r\n        if(postToBack.data.message === 'User saved'){\r\n            setmessage(postToBack.data.message)\r\n            setcounter(true)\r\n            setverify(!verify)\r\n            setstate({...state,verificationCode:''})\r\n        } else{\r\n            setmessage(postToBack.data.message)\r\n            setTimeout(() => {\r\n                setmessage(\"\");\r\n            }, 2000);\r\n        }\r\n        setload(true)\r\n    };\r\n    if (!load) {\r\n        return (\r\n            <>\r\n                <div className=\"loaderReact\">\r\n                    <div\r\n                        className=\"spinner-border text-primary\"\r\n                        style={{ width: \"500px\", height: \"500px\" }}\r\n                        role=\"status\"\r\n                    >\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n    const verification = (\r\n        <>\r\n            <input\r\n                type=\"text\"\r\n                onChange={changeValue}\r\n                value={state.verificationCode}\r\n                id=\"verificationCode\"\r\n            />\r\n            <button onClick={verificate}>click for verification</button>\r\n        </>\r\n    );\r\n    const registracia = (\r\n        <div className=\"registracia\">\r\n            <div style={{ fontSize: \"2vw\" }}>Registracia</div>\r\n            <input\r\n                onChange={changeValue}\r\n                value={state.name}\r\n                placeholder=\"name\"\r\n                type=\"text\"\r\n                id=\"name\"\r\n            />\r\n            <input\r\n                onChange={changeValue}\r\n                value={state.surname}\r\n                placeholder=\"surname\"\r\n                type=\"text\"\r\n                id=\"surname\"\r\n            />\r\n            <input\r\n                onChange={changeValue}\r\n                value={state.email}\r\n                placeholder=\"email\"\r\n                type=\"text\"\r\n                id=\"email\"\r\n            />\r\n            <input\r\n                onChange={changeValue}\r\n                value={state.password}\r\n                placeholder=\"password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n            />\r\n            <input\r\n                onChange={changeValue}\r\n                value={state.confirmPassword}\r\n                placeholder=\"confirm Password\"\r\n                type=\"password\"\r\n                id=\"confirmPassword\"\r\n            />\r\n            <button\r\n                onClick={Registration}\r\n                disabled={\r\n                    state.name.trim() &&\r\n                    state.surname.trim() &&\r\n                    state.email.trim() &&\r\n                    state.password.trim() &&\r\n                    state.confirmPassword.trim() &&\r\n                    state.confirmPassword === state.password &&\r\n                    state.password.length >= 8 &&\r\n                    state.confirmPassword.length >= 8\r\n                        ? false\r\n                        : true\r\n                }\r\n            >\r\n                click\r\n            </button>\r\n            {verify ? null : verification}\r\n            <button onClick={clear}>clear</button>\r\n        </div>\r\n    );\r\n\r\n    const login = (\r\n        <div className=\"login\">\r\n            <div style={{ fontSize: \"2vw\" }}>Login</div>\r\n            <input\r\n                value={state.loginEmail}\r\n                onChange={changeValue}\r\n                placeholder=\"email\"\r\n                id=\"loginEmail\"\r\n                type=\"text\"\r\n            />\r\n            <input\r\n                value={state.loginPassword}\r\n                onChange={changeValue}\r\n                placeholder=\"password\"\r\n                id=\"loginPassword\"\r\n                type=\"text\"\r\n            />\r\n            <button onClick={loginPost}>click</button>\r\n        </div>\r\n    );\r\n    return (\r\n        <>\r\n            <div className=\"div\">\r\n                <p onClick={() => setcounter(!counter)}>\r\n                    {counter ? \"go to registracia\" : \"go to login\"}\r\n                </p>\r\n                {counter ? login : registracia}\r\n\r\n                {arr.map(\r\n                    (elem: userDataType, i: number): JSX.Element => {\r\n                        return (\r\n                            <div key={elem.id}>\r\n                                <p>{elem.email}</p>\r\n                                <p>{elem.password}</p>\r\n                                <button onClick={deleteUser.bind(null, elem)}>\r\n                                    delete\r\n                                </button>\r\n                            </div>\r\n                        );\r\n                    },\r\n                )}\r\n            </div>\r\n            <p>{message}</p>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Container1 = memo(Container1);\r\n"]},"metadata":{},"sourceType":"module"}